service: reverb-feedboost
plugins:
  - files
provider:
  name: aws
  runtime: nodejs4.3
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "dynamodb:GetItem"
        - "dynamodb:Query"
        - "dynamodb:UpdateItem"
        - "dynamodb:DeleteItem"
        - "dynamodb:Scan"
        - "dynamodb:GetRecords"
        - "dynamodb:GetShardIterator"
        - "dynamodb:DescribeStream"
        - "dynamodb:ListStreams"
      Resource:
        - "arn:aws:dynamodb:us-east-1:*:table/feedboostUser_${opt:stage}"
        - "arn:aws:dynamodb:us-east-1:*:table/feedboostUser_${opt:stage}/index/*"
        - "arn:aws:dynamodb:us-east-1:*:table/feedboostUser_${opt:stage}/stream/*"
    - Effect: "Allow"
      Action:
        - "ses:SendEmail"
      Resource:
        - "arn:aws:ses:us-east-1:*:identity/*"
functions:
  apphome:
    environment: ${file(config-${opt:stage}.yml):variables}
    handler: build/handlers/app.home
    events:
      - http:
          path: /
          method: get
  appsub:
    environment: ${file(config-${opt:stage}.yml):variables}
    handler: build/handlers/app.subscribe
    events:
      - http:
          path: subscribe
          method: get
      - http:
          path: login
          method: get
  appunsub:
    environment: ${file(config-${opt:stage}.yml):variables}
    handler: build/handlers/app.unsubscribe
    events:
      - http:
          path: unsubscribe/{hash}
          method: post
  appauth:
    environment: ${file(config-${opt:stage}.yml):variables}
    handler: build/handlers/app.auth
    events:
      - http:
          path: subscribe/success
          method: get
  logout:
    environment: ${file(config-${opt:stage}.yml):variables}
    handler: build/handlers/app.logout
    events:
      - http:
          path: logout
          method: get
  feedcheck:
    environment: ${file(config-${opt:stage}.yml):variables}
    handler: build/handlers/feed.check
    events:
      - schedule: rate(1 hour)
resources:
  Resources:
    filesDir:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: feedboostassets${opt:stage}
        AccessControl: PublicRead
# @TODO: restore pathmapping once it can be deployed reliably.
#    pathmapping:
#      Type: AWS::ApiGateway::BasePathMapping
#      DependsOn:
#        - ApiGatewayRestApi
#      Properties:
#        DomainName: ${file(config-${opt:stage}.yml):domain}
#        Stage: ${opt:stage}
#        RestApiId:
#          Ref: ApiGatewayRestApi
    UserDB:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: feedboostUser_${opt:stage}
        StreamSpecification:
          StreamViewType: KEYS_ONLY
        AttributeDefinitions:
          -
            AttributeName: email
            AttributeType: S
          -
            AttributeName: code
            AttributeType: S
        KeySchema:
          - 
            AttributeName: email
            KeyType: HASH
        GlobalSecondaryIndexes:
          - 
            IndexName: code
            KeySchema:
              - 
                AttributeName: code
                KeyType: HASH
            Projection:
              ProjectionType: KEYS_ONLY
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
package:
  exclude:
    - '*'
    - '**'
    - '!build/**/*'
    - '!node_modules/**/*'
    - '!package.json'
